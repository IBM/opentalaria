// protocol has been generated from message format json - DO NOT EDIT
package protocol

// ScramCredentialDeletion contains the SCRAM credentials to remove.
type ScramCredentialDeletion struct {
	// Version defines the protocol version to use for encode and decode
	Version int16
	// Name contains the user name.
	Name string
	// Mechanism contains the SCRAM mechanism.
	Mechanism int8
}

func (d *ScramCredentialDeletion) encode(pe packetEncoder, version int16) (err error) {
	d.Version = version
	if err := pe.putString(d.Name); err != nil {
		return err
	}

	pe.putInt8(d.Mechanism)

	pe.putUVarint(0)
	return nil
}

func (d *ScramCredentialDeletion) decode(pd packetDecoder, version int16) (err error) {
	d.Version = version
	if d.Name, err = pd.getString(); err != nil {
		return err
	}

	if d.Mechanism, err = pd.getInt8(); err != nil {
		return err
	}

	if _, err = pd.getEmptyTaggedFieldArray(); err != nil {
		return err
	}
	return nil
}

// ScramCredentialUpsertion contains the SCRAM credentials to update/insert.
type ScramCredentialUpsertion struct {
	// Version defines the protocol version to use for encode and decode
	Version int16
	// Name contains the user name.
	Name string
	// Mechanism contains the SCRAM mechanism.
	Mechanism int8
	// Iterations contains the number of iterations.
	Iterations int32
	// Salt contains a A random salt generated by the client.
	Salt []byte
	// SaltedPassword contains the salted password.
	SaltedPassword []byte
}

func (u *ScramCredentialUpsertion) encode(pe packetEncoder, version int16) (err error) {
	u.Version = version
	if err := pe.putString(u.Name); err != nil {
		return err
	}

	pe.putInt8(u.Mechanism)

	pe.putInt32(u.Iterations)

	if err := pe.putBytes(u.Salt); err != nil {
		return err
	}

	if err := pe.putBytes(u.SaltedPassword); err != nil {
		return err
	}

	pe.putUVarint(0)
	return nil
}

func (u *ScramCredentialUpsertion) decode(pd packetDecoder, version int16) (err error) {
	u.Version = version
	if u.Name, err = pd.getString(); err != nil {
		return err
	}

	if u.Mechanism, err = pd.getInt8(); err != nil {
		return err
	}

	if u.Iterations, err = pd.getInt32(); err != nil {
		return err
	}

	if u.Salt, err = pd.getBytes(); err != nil {
		return err
	}

	if u.SaltedPassword, err = pd.getBytes(); err != nil {
		return err
	}

	if _, err = pd.getEmptyTaggedFieldArray(); err != nil {
		return err
	}
	return nil
}

type AlterUserScramCredentialsRequest struct {
	// Version defines the protocol version to use for encode and decode
	Version int16
	// Deletions contains the SCRAM credentials to remove.
	Deletions []ScramCredentialDeletion
	// Upsertions contains the SCRAM credentials to update/insert.
	Upsertions []ScramCredentialUpsertion
}

func (r *AlterUserScramCredentialsRequest) encode(pe packetEncoder) (err error) {
	pe = FlexibleEncoderFrom(pe)
	if err := pe.putArrayLength(len(r.Deletions)); err != nil {
		return err
	}
	for _, block := range r.Deletions {
		if err := block.encode(pe, r.Version); err != nil {
			return err
		}
	}

	if err := pe.putArrayLength(len(r.Upsertions)); err != nil {
		return err
	}
	for _, block := range r.Upsertions {
		if err := block.encode(pe, r.Version); err != nil {
			return err
		}
	}

	pe.putUVarint(0)
	return nil
}

func (r *AlterUserScramCredentialsRequest) decode(pd packetDecoder, version int16) (err error) {
	r.Version = version
	pd = FlexibleDecoderFrom(pd)
	var numDeletions int
	if numDeletions, err = pd.getArrayLength(); err != nil {
		return err
	}
	if numDeletions > 0 {
		r.Deletions = make([]ScramCredentialDeletion, numDeletions)
		for i := 0; i < numDeletions; i++ {
			var block ScramCredentialDeletion
			if err := block.decode(pd, r.Version); err != nil {
				return err
			}
			r.Deletions[i] = block
		}
	}

	var numUpsertions int
	if numUpsertions, err = pd.getArrayLength(); err != nil {
		return err
	}
	if numUpsertions > 0 {
		r.Upsertions = make([]ScramCredentialUpsertion, numUpsertions)
		for i := 0; i < numUpsertions; i++ {
			var block ScramCredentialUpsertion
			if err := block.decode(pd, r.Version); err != nil {
				return err
			}
			r.Upsertions[i] = block
		}
	}

	if _, err = pd.getEmptyTaggedFieldArray(); err != nil {
		return err
	}
	return nil
}

func (r *AlterUserScramCredentialsRequest) GetKey() int16 {
	return 51
}

func (r *AlterUserScramCredentialsRequest) GetVersion() int16 {
	return r.Version
}

func (r *AlterUserScramCredentialsRequest) SetVersion(version int16) {
	r.Version = version
}

func (r *AlterUserScramCredentialsRequest) GetHeaderVersion() int16 {
	return 2
}

func (r *AlterUserScramCredentialsRequest) IsValidVersion() bool {
	return r.Version == 0
}

func (r *AlterUserScramCredentialsRequest) GetRequiredVersion() int16 {
	// TODO - it isn't possible to determine this from the message format json files
	return 0
}
