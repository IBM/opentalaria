// protocol has been generated from message format json - DO NOT EDIT
package protocol

type ShareGroupHeartbeatRequest struct {
	// Version defines the protocol version to use for encode and decode
	Version int16
	// GroupID contains the group identifier.
	GroupID string
	// MemberID contains the member id generated by the consumer. The member id must be kept during the entire lifetime of the consumer process.
	MemberID string
	// MemberEpoch contains the current member epoch; 0 to join the group; -1 to leave the group.
	MemberEpoch int32
	// RackID contains a null if not provided or if it didn't change since the last heartbeat; the rack ID of consumer otherwise.
	RackID *string
	// SubscribedTopicNames contains a null if it didn't change since the last heartbeat; the subscribed topic names otherwise.
	SubscribedTopicNames []string
}

func (r *ShareGroupHeartbeatRequest) encode(pe packetEncoder) (err error) {
	pe = FlexibleEncoderFrom(pe)
	if err := pe.putString(r.GroupID); err != nil {
		return err
	}

	if err := pe.putString(r.MemberID); err != nil {
		return err
	}

	pe.putInt32(r.MemberEpoch)

	if err := pe.putNullableString(r.RackID); err != nil {
		return err
	}

	if err := pe.putStringArray(r.SubscribedTopicNames); err != nil {
		return err
	}

	pe.putUVarint(0)
	return nil
}

func (r *ShareGroupHeartbeatRequest) decode(pd packetDecoder, version int16) (err error) {
	r.Version = version
	pd = FlexibleDecoderFrom(pd)
	if r.GroupID, err = pd.getString(); err != nil {
		return err
	}

	if r.MemberID, err = pd.getString(); err != nil {
		return err
	}

	if r.MemberEpoch, err = pd.getInt32(); err != nil {
		return err
	}

	if r.RackID, err = pd.getNullableString(); err != nil {
		return err
	}

	if r.SubscribedTopicNames, err = pd.getStringArray(); err != nil {
		return err
	}

	if _, err = pd.getEmptyTaggedFieldArray(); err != nil {
		return err
	}
	return nil
}

func (r *ShareGroupHeartbeatRequest) GetKey() int16 {
	return 76
}

func (r *ShareGroupHeartbeatRequest) GetVersion() int16 {
	return r.Version
}

func (r *ShareGroupHeartbeatRequest) SetVersion(version int16) {
	r.Version = version
}

func (r *ShareGroupHeartbeatRequest) GetHeaderVersion() int16 {
	return 2
}

func (r *ShareGroupHeartbeatRequest) IsValidVersion() bool {
	return r.Version == 0
}

func (r *ShareGroupHeartbeatRequest) GetRequiredVersion() int16 {
	// TODO - it isn't possible to determine this from the message format json files
	return 0
}
